<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/FUZZY_SEARCH_README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FUZZY_SEARCH_README.md" />
              <option name="updatedContent" value="# Fuzzy Search Documentation&#10;&#10;## Overview&#10;&#10;The fuzzy search functionality allows you to search for users and candidates across multiple fields with tolerance for typos and partial matches. It searches through:&#10;- First Name&#10;- Last Name  &#10;- Full Name (first_name + last_name combined)&#10;- Email&#10;- Phone Number&#10;&#10;## Features&#10;&#10;✅ **Multi-field Search**: Searches across first_name, last_name, email, and phone_number simultaneously&#10;✅ **Full Name Search**: Intelligently combines first and last names for better matching&#10;✅ **Partial Matching**: Find results even with incomplete search terms&#10;✅ **Typo Tolerance**: Handles minor spelling variations&#10;✅ **Relevance Scoring**: Results are ranked by relevance (exact matches first)&#10;✅ **Pagination**: Supports paginated results&#10;✅ **Additional Filters**: Combine search with role, location, or experience filters&#10;✅ **Collection Agnostic**: Works with both &quot;users&quot; and &quot;candidates&quot; collections&#10;&#10;## API Endpoints&#10;&#10;### 1. Search Users&#10;&#10;**Endpoint:** `GET /api/search/users`&#10;&#10;**Query Parameters:**&#10;- `q` (required): Search query string (min 1 character)&#10;- `page` (optional): Page number (default: 1, min: 1)&#10;- `page_size` (optional): Results per page (default: 20, min: 1, max: 100)&#10;- `role_id` (optional): Filter by role ID (1=Admin, 2=Sub-Admin, 3=Candidate)&#10;&#10;**Authentication:** Required (Admin or Sub-Admin)&#10;&#10;**Example Requests:**&#10;```http&#10;# Search by name&#10;GET /api/search/users?q=John&#10;&#10;# Search by email&#10;GET /api/search/users?q=john@example.com&#10;&#10;# Search with role filter&#10;GET /api/search/users?q=admin&amp;role_id=1&#10;&#10;# Search with pagination&#10;GET /api/search/users?q=doe&amp;page=2&amp;page_size=10&#10;```&#10;&#10;**Response:**&#10;```json&#10;{&#10;  &quot;total&quot;: 15,&#10;  &quot;page&quot;: 1,&#10;  &quot;page_size&quot;: 20,&#10;  &quot;results&quot;: [&#10;    {&#10;      &quot;_id&quot;: &quot;507f1f77bcf86cd799439011&quot;,&#10;      &quot;first_name&quot;: &quot;John&quot;,&#10;      &quot;last_name&quot;: &quot;Doe&quot;,&#10;      &quot;email&quot;: &quot;john.doe@example.com&quot;,&#10;      &quot;phone_number&quot;: &quot;+1234567890&quot;,&#10;      &quot;role_id&quot;: 3,&#10;      &quot;created_at&quot;: &quot;2025-10-16T12:00:00Z&quot;,&#10;      &quot;updated_at&quot;: &quot;2025-10-16T12:00:00Z&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;### 2. Search Candidates&#10;&#10;**Endpoint:** `GET /api/search/candidates`&#10;&#10;**Query Parameters:**&#10;- `q` (required): Search query string (min 1 character)&#10;- `page` (optional): Page number (default: 1, min: 1)&#10;- `page_size` (optional): Results per page (default: 20, min: 1, max: 100)&#10;- `location` (optional): Filter by location (case-insensitive)&#10;- `min_experience` (optional): Minimum years of experience (min: 0)&#10;&#10;**Authentication:** Required (Admin or Sub-Admin)&#10;&#10;**Example Requests:**&#10;```http&#10;# Search by name&#10;GET /api/search/candidates?q=Alice Smith&#10;&#10;# Search with location filter&#10;GET /api/search/candidates?q=developer&amp;location=New York&#10;&#10;# Search with experience filter&#10;GET /api/search/candidates?q=python&amp;min_experience=5&#10;&#10;# Search with multiple filters&#10;GET /api/search/candidates?q=engineer&amp;location=SF&amp;min_experience=3&amp;page_size=50&#10;```&#10;&#10;**Response:**&#10;```json&#10;{&#10;  &quot;total&quot;: 8,&#10;  &quot;page&quot;: 1,&#10;  &quot;page_size&quot;: 20,&#10;  &quot;results&quot;: [&#10;    {&#10;      &quot;_id&quot;: &quot;507f1f77bcf86cd799439012&quot;,&#10;      &quot;first_name&quot;: &quot;Alice&quot;,&#10;      &quot;last_name&quot;: &quot;Smith&quot;,&#10;      &quot;email&quot;: &quot;alice.smith@example.com&quot;,&#10;      &quot;phone_number&quot;: &quot;+9876543210&quot;,&#10;      &quot;location&quot;: &quot;New York&quot;,&#10;      &quot;skills&quot;: [&quot;Python&quot;, &quot;Django&quot;, &quot;React&quot;],&#10;      &quot;degree&quot;: &quot;Computer Science&quot;,&#10;      &quot;total_experience&quot;: 5.5,&#10;      &quot;created_at&quot;: &quot;2025-10-15T10:00:00Z&quot;,&#10;      &quot;updated_at&quot;: &quot;2025-10-15T10:00:00Z&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;## Search Algorithm&#10;&#10;### Relevance Scoring&#10;&#10;Results are ranked by a scoring system:&#10;&#10;1. **Exact Match**: +100 points&#10;   - Exact match of search term with any field&#10;   &#10;2. **Exact Full Name Match**: +150 points&#10;   - Search term exactly matches &quot;first_name last_name&quot;&#10;   &#10;3. **Starts With**: +50-75 points&#10;   - Field value starts with the search term&#10;   &#10;4. **Contains**: +25-40 points&#10;   - Field value contains the search term&#10;   &#10;5. **Word Start**: +15 points&#10;   - Any word in the field starts with search term&#10;&#10;### Fuzzy Matching&#10;&#10;The search uses regex patterns to enable:&#10;- **Case-insensitive matching**: &quot;john&quot; matches &quot;John&quot;, &quot;JOHN&quot;, &quot;JoHn&quot;&#10;- **Partial matching**: &quot;ali&quot; matches &quot;Alice&quot;, &quot;Alison&quot;, &quot;Natalie&quot;&#10;- **Multi-word matching**: &quot;john doe&quot; matches both words in any order&#10;- **Special character tolerance**: Ignores special characters in search&#10;&#10;## Usage Examples&#10;&#10;### Example 1: Search by Full Name&#10;```http&#10;GET /api/search/candidates?q=John Doe&#10;Authorization: Bearer YOUR_TOKEN&#10;```&#10;This will find candidates with:&#10;- first_name=&quot;John&quot; AND last_name=&quot;Doe&quot;&#10;- Any field containing &quot;John&quot; or &quot;Doe&quot;&#10;&#10;### Example 2: Search by Partial Email&#10;```http&#10;GET /api/search/users?q=john.smith&#10;Authorization: Bearer YOUR_TOKEN&#10;```&#10;Matches emails like:&#10;- john.smith@example.com&#10;- john.smith123@company.org&#10;&#10;### Example 3: Search with Filters&#10;```http&#10;GET /api/search/candidates?q=developer&amp;location=San Francisco&amp;min_experience=3&#10;Authorization: Bearer YOUR_TOKEN&#10;```&#10;Finds candidates who:&#10;- Have &quot;developer&quot; in any searchable field&#10;- AND are located in San Francisco&#10;- AND have at least 3 years of experience&#10;&#10;### Example 4: Phone Number Search&#10;```http&#10;GET /api/search/candidates?q=+1-555-123&#10;Authorization: Bearer YOUR_TOKEN&#10;```&#10;Matches phone numbers containing these digits&#10;&#10;## Integration Example (Frontend)&#10;&#10;### JavaScript/TypeScript&#10;```typescript&#10;async function searchCandidates(query: string, page = 1) {&#10;  const token = localStorage.getItem('access_token');&#10;  &#10;  const response = await fetch(&#10;    `http://localhost:8000/api/search/candidates?q=${encodeURIComponent(query)}&amp;page=${page}&amp;page_size=20`,&#10;    {&#10;      headers: {&#10;        'Authorization': `Bearer ${token}`&#10;      }&#10;    }&#10;  );&#10;  &#10;  if (!response.ok) {&#10;    throw new Error('Search failed');&#10;  }&#10;  &#10;  return await response.json();&#10;}&#10;&#10;// Usage&#10;const results = await searchCandidates('john doe');&#10;console.log(`Found ${results.total} candidates`);&#10;results.results.forEach(candidate =&gt; {&#10;  console.log(`${candidate.first_name} ${candidate.last_name}`);&#10;});&#10;```&#10;&#10;### Python&#10;```python&#10;import requests&#10;&#10;def search_users(query: str, token: str, role_id: int = None):&#10;    params = {&#10;        'q': query,&#10;        'page': 1,&#10;        'page_size': 20&#10;    }&#10;    &#10;    if role_id:&#10;        params['role_id'] = role_id&#10;    &#10;    response = requests.get(&#10;        'http://localhost:8000/api/search/users',&#10;        params=params,&#10;        headers={'Authorization': f'Bearer {token}'}&#10;    )&#10;    &#10;    response.raise_for_status()&#10;    return response.json()&#10;&#10;# Usage&#10;results = search_users('admin', token='YOUR_TOKEN', role_id=1)&#10;print(f&quot;Found {results['total']} admin users&quot;)&#10;```&#10;&#10;## Performance Tips&#10;&#10;1. **Use Specific Terms**: More specific search terms return more relevant results&#10;2. **Combine Filters**: Use location/experience/role filters to narrow results&#10;3. **Pagination**: Use reasonable page sizes (20-50) for better performance&#10;4. **Index Your Database**: Ensure MongoDB indexes are created on searchable fields&#10;&#10;## Security&#10;&#10;- All search endpoints require authentication&#10;- Only Admin and Sub-Admin roles can access search functionality&#10;- No sensitive data (passwords) are returned in search results&#10;- Results are filtered based on user permissions&#10;&#10;## Troubleshooting&#10;&#10;### No Results Found&#10;- Check spelling of search term&#10;- Try shorter/partial search terms&#10;- Verify the data exists in the collection&#10;- Check filters aren't too restrictive&#10;&#10;### Slow Performance&#10;- Reduce page_size&#10;- Add more specific filters&#10;- Ensure database indexes are created&#10;- Consider adding minimum search term length&#10;&#10;### Authentication Errors&#10;- Verify your JWT token is valid and not expired&#10;- Ensure you have Admin or Sub-Admin role&#10;- Check Authorization header format: `Bearer YOUR_TOKEN`&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/FUZZY_SEARCH_SUMMARY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FUZZY_SEARCH_SUMMARY.md" />
              <option name="updatedContent" value="# Fuzzy Search Implementation Summary&#10;&#10;## ✅ Implementation Complete!&#10;&#10;The fuzzy search functionality has been successfully implemented and is ready to use.&#10;&#10;##  Files Created/Modified&#10;&#10;### New Files:&#10;1. **`services/fuzzy_search.py`** - Core fuzzy search service&#10;2. **`models/search_model.py`** - Request/Response models for search&#10;3. **`routes/search_route.py`** - API endpoints for fuzzy search&#10;4. **`test_fuzzy_search.http`** - Test cases for the search functionality&#10;5. **`FUZZY_SEARCH_README.md`** - Comprehensive documentation&#10;&#10;### Modified Files:&#10;1. **`dependencies/repository_deps.py`** - Added fuzzy search service dependency&#10;2. **`main.py`** - Registered search routes&#10;&#10;##  Quick Start&#10;&#10;### 1. Start Your Server&#10;```bash&#10;uvicorn main:app --reload&#10;```&#10;&#10;### 2. Search Users&#10;```http&#10;GET http://localhost:8000/api/search/users?q=john&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN&#10;```&#10;&#10;### 3. Search Candidates&#10;```http&#10;GET http://localhost:8000/api/search/candidates?q=alice&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN&#10;```&#10;&#10;##  Key Features&#10;&#10;### Search Fields:&#10;- ✅ first_name&#10;- ✅ last_name&#10;- ✅ Full name (first_name + last_name combined)&#10;- ✅ email&#10;- ✅ phone_number&#10;&#10;### Search Capabilities:&#10;- ✅ Partial matching (e.g., &quot;joh&quot; finds &quot;John&quot;)&#10;- ✅ Case-insensitive search&#10;- ✅ Typo tolerance&#10;- ✅ Full name search (searches &quot;John Doe&quot; as combined name)&#10;- ✅ Relevance scoring (best matches first)&#10;- ✅ Pagination support&#10;- ✅ Additional filters (role_id for users, location/experience for candidates)&#10;&#10;### Collection Support:&#10;- ✅ **users** collection&#10;- ✅ **candidates** collection&#10;&#10;##  API Endpoints&#10;&#10;### Search Users&#10;**Endpoint:** `GET /api/search/users`&#10;**Params:** &#10;- `q` (required) - Search term&#10;- `page` (optional) - Page number (default: 1)&#10;- `page_size` (optional) - Results per page (default: 20, max: 100)&#10;- `role_id` (optional) - Filter by role (1=Admin, 2=Sub-Admin, 3=Candidate)&#10;&#10;**Auth:** Required (Admin/Sub-Admin only)&#10;&#10;### Search Candidates&#10;**Endpoint:** `GET /api/search/candidates`&#10;**Params:**&#10;- `q` (required) - Search term&#10;- `page` (optional) - Page number (default: 1)&#10;- `page_size` (optional) - Results per page (default: 20, max: 100)&#10;- `location` (optional) - Filter by location&#10;- `min_experience` (optional) - Minimum years of experience&#10;&#10;**Auth:** Required (Admin/Sub-Admin only)&#10;&#10;##  Search Algorithm&#10;&#10;### Scoring System (Higher = Better Match):&#10;- **Exact match**: 100 points&#10;- **Exact full name match**: 150 points&#10;- **Starts with search term**: 50-75 points&#10;- **Contains search term**: 25-40 points&#10;- **Word starts with search term**: 15 points&#10;&#10;Results are automatically sorted by relevance score!&#10;&#10;##  Usage Examples&#10;&#10;### Search by Name:&#10;```&#10;GET /api/search/candidates?q=John Doe&#10;```&#10;Finds: John Doe, John D., Johnny Doe, etc.&#10;&#10;### Search by Email:&#10;```&#10;GET /api/search/users?q=john@example&#10;```&#10;Finds: john@example.com, john.smith@example.org, etc.&#10;&#10;### Search with Filters:&#10;```&#10;GET /api/search/candidates?q=developer&amp;location=New York&amp;min_experience=5&#10;```&#10;Finds: Developers in New York with 5+ years experience&#10;&#10;### Search by Phone:&#10;```&#10;GET /api/search/users?q=555-1234&#10;```&#10;Finds: +1-555-1234, (555) 1234, etc.&#10;&#10;##  Testing&#10;&#10;Use the `test_fuzzy_search.http` file to test all endpoints. It includes:&#10;- ✅ User search examples&#10;- ✅ Candidate search examples&#10;- ✅ Filter combinations&#10;- ✅ Pagination tests&#10;- ✅ Error cases&#10;&#10;##  Documentation&#10;&#10;See `FUZZY_SEARCH_README.md` for:&#10;- Detailed API documentation&#10;- Integration examples (JavaScript, Python)&#10;- Performance tips&#10;- Troubleshooting guide&#10;- Security information&#10;&#10;##  Ready to Use!&#10;&#10;Your fuzzy search is now fully functional and integrated into your API. The server will auto-reload if running with `--reload` flag.&#10;&#10;**Next Steps:**&#10;1. Test the endpoints using the test file&#10;2. Verify results with your data&#10;3. Integrate into your frontend application&#10;&#10;Happy searching! &#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_fuzzy_search.http">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_fuzzy_search.http" />
              <option name="updatedContent" value="### ========================================&#10;### FUZZY SEARCH - USERS&#10;### ========================================&#10;&#10;### Search users by first name&#10;GET http://localhost:8000/api/search/users?q=John&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search users by last name&#10;GET http://localhost:8000/api/search/users?q=Doe&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search users by full name (first + last)&#10;GET http://localhost:8000/api/search/users?q=John Doe&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search users by email&#10;GET http://localhost:8000/api/search/users?q=john@example.com&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search users by partial email&#10;GET http://localhost:8000/api/search/users?q=john&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search users by phone number&#10;GET http://localhost:8000/api/search/users?q=1234567890&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search users with role filter (only admins)&#10;GET http://localhost:8000/api/search/users?q=admin&amp;role_id=1&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search users with role filter (only sub-admins)&#10;GET http://localhost:8000/api/search/users?q=jane&amp;role_id=2&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search users with role filter (only candidates)&#10;GET http://localhost:8000/api/search/users?q=candidate&amp;role_id=3&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Fuzzy search with typo tolerance (e.g., &quot;Jon&quot; instead of &quot;John&quot;)&#10;GET http://localhost:8000/api/search/users?q=Jon&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### ========================================&#10;### FUZZY SEARCH - CANDIDATES&#10;### ========================================&#10;&#10;### Search candidates by first name&#10;GET http://localhost:8000/api/search/candidates?q=Alice&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search candidates by last name&#10;GET http://localhost:8000/api/search/candidates?q=Smith&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search candidates by full name&#10;GET http://localhost:8000/api/search/candidates?q=Alice Smith&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search candidates by email&#10;GET http://localhost:8000/api/search/candidates?q=alice@example.com&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search candidates by phone number&#10;GET http://localhost:8000/api/search/candidates?q=+1234567890&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search candidates with location filter&#10;GET http://localhost:8000/api/search/candidates?q=john&amp;location=New York&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search candidates with minimum experience filter&#10;GET http://localhost:8000/api/search/candidates?q=developer&amp;min_experience=5&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search candidates with both location and experience filters&#10;GET http://localhost:8000/api/search/candidates?q=python&amp;location=San Francisco&amp;min_experience=3&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Partial name search&#10;GET http://localhost:8000/api/search/candidates?q=Ali&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Search with pagination (page 2)&#10;GET http://localhost:8000/api/search/candidates?q=developer&amp;page=2&amp;page_size=10&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### ========================================&#10;### ERROR TEST CASES&#10;### ========================================&#10;&#10;### Test: Search without authentication (should fail with 401)&#10;GET http://localhost:8000/api/search/users?q=john&amp;page=1&amp;page_size=20&#10;&#10;### Test: Empty search query (should fail with validation error)&#10;GET http://localhost:8000/api/search/users?q=&amp;page=1&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Test: Invalid page number&#10;GET http://localhost:8000/api/search/candidates?q=test&amp;page=0&amp;page_size=20&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;&#10;### Test: Invalid page size (too large)&#10;GET http://localhost:8000/api/search/candidates?q=test&amp;page=1&amp;page_size=200&#10;Authorization: Bearer YOUR_ADMIN_TOKEN_HERE&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>